# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true

  # Turn off dead letters until Akka HTTP server is stable
  log-dead-letters = off
}
akka.http.server.raw-request-uri-header=on

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.


## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = ["de", "en"]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  errorHandler = "errorhandler.ErrorHandler"

  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  #filters += my.application.Filters
  filters = "filters.DefaultFilter"

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server{
  provider="play.core.server.akkahttp.AkkaHttpServerProvider"
  akka {
    # How long to wait when binding to the listening socket
    http-bind-timeout = 5 seconds
  }
}

play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  transport = "jdk"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  acceptAnyCertificate=true

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #enabledProtocols = [
    #  "TLSv1.2",
    #  "TLSv1.1",
    #  "TLSv1"
    #]
    debug.handshake = false
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
    trustManager = {
      stores = [
        {
          type = "PEM", data = """
-----BEGIN CERTIFICATE-----
MIIFBTCCA+2gAwIBAgIQbWdKBoxoKsjvK/DINlRhBjANBgkqhkiG9w0BAQsFADB+
MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd
BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxLzAtBgNVBAMTJlN5bWFudGVj
IENsYXNzIDMgU2VjdXJlIFNlcnZlciBDQSAtIEc0MB4XDTE1MDgxMDAwMDAwMFoX
DTE3MDgxMDIzNTk1OVowgYkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y
bmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMRYwFAYDVQQKDA1Ud2l0dGVyLCBJ
bmMuMR8wHQYDVQQLDBZGUkEyIFBvaW50IG9mIFByZXNlbmNlMRQwEgYDVQQDDAt0
d2l0dGVyLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMmzHtB0
a/Lyom0PoIJk80AkLSLdkNHSPJQuTajMQh3nIDdSVm5MksDTIl/6FpEfvmiuVY3T
Z0I+9UK7abB31xRRaYUvG8vq7qkrg7BgV4CP1MlPgjkJBDHr9e2KQIWuQjjAZxnh
JTrWvEiuZGKLalJpNXGLfT725LmxR8yVtgE/IiB7mKS8vdcCSSo1XOH0hFY39slw
A8YrNK0cg30IA9LSIBYG+OtNl5NGe1O6x2RjT0siq40qb6bpN750ZeXtOB77rWIJ
q43sQDQI+Nh2ptzrRHfZEFYWYIbg3y/kesjOJHCOD8doHK6nJeXY9nfmF4xKdI4k
8TdOkimLSrfJSX0CAwEAAaOCAXEwggFtMCcGA1UdEQQgMB6CC3R3aXR0ZXIuY29t
gg93d3cudHdpdHRlci5jb20wCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCBaAwHQYD
VR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMGEGA1UdIARaMFgwVgYGZ4EMAQIC
MEwwIwYIKwYBBQUHAgEWF2h0dHBzOi8vZC5zeW1jYi5jb20vY3BzMCUGCCsGAQUF
BwICMBkaF2h0dHBzOi8vZC5zeW1jYi5jb20vcnBhMB8GA1UdIwQYMBaAFF9gz2GQ
Vd+EQxSKYCqy9Xr0QxjvMCsGA1UdHwQkMCIwIKAeoByGGmh0dHA6Ly9zcy5zeW1j
Yi5jb20vc3MuY3JsMFcGCCsGAQUFBwEBBEswSTAfBggrBgEFBQcwAYYTaHR0cDov
L3NzLnN5bWNkLmNvbTAmBggrBgEFBQcwAoYaaHR0cDovL3NzLnN5bWNiLmNvbS9z
cy5jcnQwDQYJKoZIhvcNAQELBQADggEBAHz4AmJ8S6t3dJkciqGcf73gokgoRIoF
zjcYjpzc198sQ2o1lL5STD8bbMB4KAbvkueuKsDPc2nCu7Zjk1EaM6L7hQomIQjM
U4LTrJl6uvi3XMgVMCkAcauOUgr6zaJ30HSHJUfCIe8CJLbHdEXuwILU7zftF0An
6I0VUUxvxPuNWBT7E4moTR2angxXaO3wykAYI/bvJLFOZ5cY21JXHj9hObUPa7VG
UjvpJE3z3hZxqMszcVPbXwVPBcg+HCMUGohfjFo/juHDR6mfkHIsoTM8dEG3DX7P
zKwCGYK69hogLqkUUvQaFqR4o+7po+1Jov8bjm5iEYUpzbOy1JnWl24=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFODCCBCCgAwIBAgIQUT+5dDhwtzRAQY0wkwaZ/zANBgkqhkiG9w0BAQsFADCB
yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp
U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW
ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0
aG9yaXR5IC0gRzUwHhcNMTMxMDMxMDAwMDAwWhcNMjMxMDMwMjM1OTU5WjB+MQsw
CQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNV
BAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxLzAtBgNVBAMTJlN5bWFudGVjIENs
YXNzIDMgU2VjdXJlIFNlcnZlciBDQSAtIEc0MIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEAstgFyhx0LbUXVjnFSlIJluhL2AzxaJ+aQihiw6UwU35VEYJb
A3oNL+F5BMm0lncZgQGUWfm893qZJ4Itt4PdWid/sgN6nFMl6UgfRk/InSn4vnlW
9vf92Tpo2otLgjNBEsPIPMzWlnqEIRoiBAMnF4scaGGTDw5RgDMdtLXO637QYqzu
s3sBdO9pNevK1T2p7peYyo2qRA4lmUoVlqTObQJUHypqJuIGOmNIrLRM0XWTUP8T
L9ba4cYY9Z/JJV3zADreJk20KQnNDz0jbxZKgRb78oMQw7jW2FUyPfG9D72MUpVK
Fpd6UiFjdS8W+cRmvvW1Cdj/JwDNRHxvSz+w9wIDAQABo4IBYzCCAV8wEgYDVR0T
AQH/BAgwBgEB/wIBADAwBgNVHR8EKTAnMCWgI6Ahhh9odHRwOi8vczEuc3ltY2Iu
Y29tL3BjYTMtZzUuY3JsMA4GA1UdDwEB/wQEAwIBBjAvBggrBgEFBQcBAQQjMCEw
HwYIKwYBBQUHMAGGE2h0dHA6Ly9zMi5zeW1jYi5jb20wawYDVR0gBGQwYjBgBgpg
hkgBhvhFAQc2MFIwJgYIKwYBBQUHAgEWGmh0dHA6Ly93d3cuc3ltYXV0aC5jb20v
Y3BzMCgGCCsGAQUFBwICMBwaGmh0dHA6Ly93d3cuc3ltYXV0aC5jb20vcnBhMCkG
A1UdEQQiMCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0xLTUzNDAdBgNVHQ4E
FgQUX2DPYZBV34RDFIpgKrL1evRDGO8wHwYDVR0jBBgwFoAUf9Nlp8Ld7LvwMAnz
Qzn6Aq8zMTMwDQYJKoZIhvcNAQELBQADggEBAF6UVkndji1l9cE2UbYD49qecxny
H1mrWH5sJgUs+oHXXCMXIiw3k/eG7IXmsKP9H+IyqEVv4dn7ua/ScKAyQmW/hP4W
Ko8/xabWo5N9Q+l0IZE1KPRj6S7t9/Vcf0uatSDpCr3gRRAMFJSaXaXjS5HoJJtG
QGX0InLNmfiIEfXzf+YzguaoxX7+0AjiJVgIcWjmzaLmFN5OUiQt/eV5E1PnXi8t
TRttQBVSK/eHiXgSgW7ZTaoteNTCLD0IX4eRnh8OsN4wUmSGiaqdZpwOdgyA8nTY
Kvi4Os7X1g8RvmurFPW9QaAiY4nxug9vKWNmLT+sjHLF+8fk1A/yO0+MKcc=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIGBzCCBO+gAwIBAgIHGTDS6sDmxjANBgkqhkiG9w0BAQsFADCBoTELMAkGA1UE
BhMCREUxJDAiBgNVBAoTG0ZhY2hob2Noc2NodWxlIFNjaG1hbGthbGRlbjEWMBQG
A1UECxMNUmVjaGVuemVudHJ1bTEtMCsGA1UEAxMkRmFjaGhvY2hzY2h1bGUgU2No
bWFsa2FsZGVuIENBIC0gRzAxMSUwIwYJKoZIhvcNAQkBFhZwa2lAZmgtc2NobWFs
a2FsZGVuLmRlMB4XDTE1MDMyNDEyMTUyM1oXDTE5MDcwOTIzNTkwMFowgYMxCzAJ
BgNVBAYTAkRFMRMwEQYDVQQIDApUaHVlcmluZ2VuMRUwEwYDVQQHDAxTY2htYWxr
YWxkZW4xJDAiBgNVBAoMG0ZhY2hob2Noc2NodWxlIFNjaG1hbGthbGRlbjEiMCAG
A1UEAwwZc3R1ZGlwLmZoLXNjaG1hbGthbGRlbi5kZTCCASIwDQYJKoZIhvcNAQEB
BQADggEPADCCAQoCggEBAPNRjbiMw/Br9xUw9ShcDbGxbCgfCCJ+IiO3y9qEsobq
N1ZVEXxi2f9r53Czhh/0P53807CEvXz3xuRhnKsP50dWOg5ltdcjKtzZUUCQP3j9
HI8PuWyDuDGD13V1G/pcuCV8efrwhHS8kUgNoynq4tc8Hr0ilfwwp3S06M7YFqHM
oD1fuu8kPA7tboYO9I/s653BIP3qq6VxboHYfiwei3p8doXYsXXgAd3k68HFmxeQ
3scwzH3wIEq4RG+xaxw3YiZ1dxmNmi8SXh4iyK8KhJWCWyjOaf7m9+WhgdLPJw9J
9yXPJj2kjileKB7Y/hkoeBPw8XfTe8rFtEd/DBrhJO8CAwEAAaOCAl4wggJaME8G
A1UdIARIMEYwEQYPKwYBBAGBrSGCLAEBBAMDMBEGDysGAQQBga0hgiwCAQQDATAP
Bg0rBgEEAYGtIYIsAQEEMA0GCysGAQQBga0hgiweMAkGA1UdEwQCMAAwCwYDVR0P
BAQDAgTwMBMGA1UdJQQMMAoGCCsGAQUFBwMBMB0GA1UdDgQWBBTKIkv9vWR0jyA3
n4zeo7mrj+J3SDAfBgNVHSMEGDAWgBRVWXihaADKXlqvGomExwkB+/hVvjAkBgNV
HREEHTAbghlzdHVkaXAuZmgtc2NobWFsa2FsZGVuLmRlMIGRBgNVHR8EgYkwgYYw
QaA/oD2GO2h0dHA6Ly9jZHAxLnBjYS5kZm4uZGUvZmgtc2NobWFsa2FsZGVuLWNh
L3B1Yi9jcmwvY2FjcmwuY3JsMEGgP6A9hjtodHRwOi8vY2RwMi5wY2EuZGZuLmRl
L2ZoLXNjaG1hbGthbGRlbi1jYS9wdWIvY3JsL2NhY3JsLmNybDCB3wYIKwYBBQUH
AQEEgdIwgc8wMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwLnBjYS5kZm4uZGUvT0NT
UC1TZXJ2ZXIvT0NTUDBLBggrBgEFBQcwAoY/aHR0cDovL2NkcDEucGNhLmRmbi5k
ZS9maC1zY2htYWxrYWxkZW4tY2EvcHViL2NhY2VydC9jYWNlcnQuY3J0MEsGCCsG
AQUFBzAChj9odHRwOi8vY2RwMi5wY2EuZGZuLmRlL2ZoLXNjaG1hbGthbGRlbi1j
YS9wdWIvY2FjZXJ0L2NhY2VydC5jcnQwDQYJKoZIhvcNAQELBQADggEBAAFjXn0d
98UkC8vl3Z1Kbr/T7m1oiR9BvuJGY7iKQpLGOc5S6Cv0Va7s8I4sQvAroBIkf591
RhwM90oZ796UyQW5zVx0IiHkPqOMno9/QB0Yk+hKUN0LfQc89alg8ifMvVvBGvoB
itLS0lK0Du/XFa+yoTPoj13hKwX/n2OQBiFanRbkodHkpccp70ArXMJGi0QPxtlS
PncbX/hacx7r49kQFh4lw+RxlO67KcaNqR6F5RAnWRToc5WGfv95Z9JFB9ScWH+b
YizAGy2j+dy+E8w4C8oncIFBIF9lohfyKnjLy/9zU7iBmq249pt/QR2Dq4lKyHFN
M8mCkIVr4LyT9Xg=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFgjCCBGqgAwIBAgIHF6/23+u/BDANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQG
EwJERTETMBEGA1UEChMKREZOLVZlcmVpbjEQMA4GA1UECxMHREZOLVBLSTEkMCIG
A1UEAxMbREZOLVZlcmVpbiBQQ0EgR2xvYmFsIC0gRzAxMB4XDTE0MDYwNTE0MDYw
N1oXDTE5MDcwOTIzNTkwMFowgaExCzAJBgNVBAYTAkRFMSQwIgYDVQQKExtGYWNo
aG9jaHNjaHVsZSBTY2htYWxrYWxkZW4xFjAUBgNVBAsTDVJlY2hlbnplbnRydW0x
LTArBgNVBAMTJEZhY2hob2Noc2NodWxlIFNjaG1hbGthbGRlbiBDQSAtIEcwMTEl
MCMGCSqGSIb3DQEJARYWcGtpQGZoLXNjaG1hbGthbGRlbi5kZTCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBALR8MVXdA7ZXOSjNyg3cb16/phou+i1x8LoH
MhkKV+5Uv/2yAs+RFSzUTOfmp2Onni8qN4yJUryXCO9WuQa2IHG2vrwW/reMj/11
vctsAvr1Xbl1VuatQj7UUHV6bcWvVBxSEsoS685YmXBubDZMl4QfsZegENBQH7NB
Z6gMGzISqo6qiPZ4RzoOJSKdChs+i0WoNoENBiz9cNB51UP7ARPnZDRXCvthz4FK
Zvo0jMfxitTlZbqcqn4WZgBjCLUCWYRFFNMrXUwYvu6MpuyAlICnnvezmoKmiHTU
sPL2EjVAW5nBkyff7R9PCanUv5Hd49+SkW/wLT2kX1wWw94pTOUCAwEAAaOCAgMw
ggH/MBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgEGMBEGA1UdIAQK
MAgwBgYEVR0gADAdBgNVHQ4EFgQUVVl4oWgAyl5arxqJhMcJAfv4Vb4wHwYDVR0j
BBgwFoAUSbfGz+g9H3/qRHsTKffxCnA+3mQwIQYDVR0RBBowGIEWcGtpQGZoLXNj
aG1hbGthbGRlbi5kZTCBiAYDVR0fBIGAMH4wPaA7oDmGN2h0dHA6Ly9jZHAxLnBj
YS5kZm4uZGUvZ2xvYmFsLXJvb3QtY2EvcHViL2NybC9jYWNybC5jcmwwPaA7oDmG
N2h0dHA6Ly9jZHAyLnBjYS5kZm4uZGUvZ2xvYmFsLXJvb3QtY2EvcHViL2NybC9j
YWNybC5jcmwwgdcGCCsGAQUFBwEBBIHKMIHHMDMGCCsGAQUFBzABhidodHRwOi8v
b2NzcC5wY2EuZGZuLmRlL09DU1AtU2VydmVyL09DU1AwRwYIKwYBBQUHMAKGO2h0
dHA6Ly9jZHAxLnBjYS5kZm4uZGUvZ2xvYmFsLXJvb3QtY2EvcHViL2NhY2VydC9j
YWNlcnQuY3J0MEcGCCsGAQUFBzAChjtodHRwOi8vY2RwMi5wY2EuZGZuLmRlL2ds
b2JhbC1yb290LWNhL3B1Yi9jYWNlcnQvY2FjZXJ0LmNydDANBgkqhkiG9w0BAQsF
AAOCAQEAnylsYzv1UTEiQ2HYbbwrTIuGqkXxOdZB0nPB2ICMSKAFkRea32ZgJ9zA
dnRdHuUYQieDCdNg+nJsTNtZU8VbCYRQjCFD/RXtsfOMjC78HOO2w2rpu9PTvX4K
n3zzijO/aFMcrB7ySxwG/cOzTRM838hczAW+2niNUsusHG8A/rgkn6IB9IP620b3
nrZJV/shfCyYKNoHMXkgUpo6i/XN9MVNzf/XifdvsgPErTPdpiBEVe27GLGl+Hf0
LFvbfbGzOlQucu8ds7Jh7f/aqtdO/MrGbuhrC73LXX9eZQRK0JEDVeXhmY0iuJK4
WjX3zB+N5bg7YuVdDU+hU2j7SP3hHA==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIE1TCCA72gAwIBAgIIUE7G9T0RtGQwDQYJKoZIhvcNAQELBQAwcTELMAkGA1UE
BhMCREUxHDAaBgNVBAoTE0RldXRzY2hlIFRlbGVrb20gQUcxHzAdBgNVBAsTFlQt
VGVsZVNlYyBUcnVzdCBDZW50ZXIxIzAhBgNVBAMTGkRldXRzY2hlIFRlbGVrb20g
Um9vdCBDQSAyMB4XDTE0MDcyMjEyMDgyNloXDTE5MDcwOTIzNTkwMFowWjELMAkG
A1UEBhMCREUxEzARBgNVBAoTCkRGTi1WZXJlaW4xEDAOBgNVBAsTB0RGTi1QS0kx
JDAiBgNVBAMTG0RGTi1WZXJlaW4gUENBIEdsb2JhbCAtIEcwMTCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAOmbw2eF+Q2u9Y1Uw5ZQNT1i6W5M7ZTXAFuV
InTUIOs0j9bswDEEC5mB4qYU0lKgKCOEi3SJBF5b4OJ4wXjLFssoNTl7LZBF0O2g
AHp8v0oOGwDDhulcKzERewzzgiRDjBw4i2poAJru3E94q9LGE5t2re7eJujvAa90
D8EJovZrzr3TzRQwT/Xl46TIYpuCGgMnMA0CZWBN7dEJIyqWNVgn03bGcbaQHcTt
/zWGfW8zs9sPxRHCioOhlF1Ba9jSEPVM/cpRrNm975KDu9rrixZWVkPP4dUTPaYf
JzDNSVTbyRM0mnF1xWzqpwuY+SGdJ68+ozk5SGqMrcmZ+8MS8r0CAwEAAaOCAYYw
ggGCMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUSbfGz+g9H3/qRHsTKffxCnA+
3mQwHwYDVR0jBBgwFoAUMcN5G7r1U9cX4Il6LRdsCrMrnTMwEgYDVR0TAQH/BAgw
BgEB/wIBAjBiBgNVHSAEWzBZMBEGDysGAQQBga0hgiwBAQQCAjARBg8rBgEEAYGt
IYIsAQEEAwAwEQYPKwYBBAGBrSGCLAEBBAMBMA8GDSsGAQQBga0hgiwBAQQwDQYL
KwYBBAGBrSGCLB4wPgYDVR0fBDcwNTAzoDGgL4YtaHR0cDovL3BraTAzMzYudGVs
ZXNlYy5kZS9ybC9EVF9ST09UX0NBXzIuY3JsMHgGCCsGAQUFBwEBBGwwajAsBggr
BgEFBQcwAYYgaHR0cDovL29jc3AwMzM2LnRlbGVzZWMuZGUvb2NzcHIwOgYIKwYB
BQUHMAKGLmh0dHA6Ly9wa2kwMzM2LnRlbGVzZWMuZGUvY3J0L0RUX1JPT1RfQ0Ff
Mi5jZXIwDQYJKoZIhvcNAQELBQADggEBAGMgKP2cIYZyvjlGWTkyJbypAZsNzMp9
QZyGbQpuLLMTWXWxM5IbYScW/8Oy1TWC+4QqAUm9ZrtmL7LCBl1uP27jAVpbykNj
XJW24TGnH9UHX03mZYJOMvnDfHpLzU1cdO4h8nUC7FI+0slq05AjbklnNb5/TVak
7Mwvz7ehl6hyPsm8QNZapAg91ryCw7e3Mo6xLI5qbbc1AhnP9TlEWGOnJAAQsLv8
Tq9uLzi7pVdJP9huUG8sl5bcHUaaZYnPrszy5dmfU7M+oS+SqdgLxoQfBMbrHuif
fbV7pQLxJMUkYxE0zFqTICp5iDolQpCpZTt8htMSFSMp/CzazDlbVBc=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDnzCCAoegAwIBAgIBJjANBgkqhkiG9w0BAQUFADBxMQswCQYDVQQGEwJERTEc
MBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxlU2Vj
IFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290IENB
IDIwHhcNOTkwNzA5MTIxMTAwWhcNMTkwNzA5MjM1OTAwWjBxMQswCQYDVQQGEwJE
RTEcMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxl
U2VjIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290
IENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrC6M14IspFLEU
ha88EOQ5bzVdSq7d6mGNlUn0b2SjGmBmpKlAIoTZ1KXleJMOaAGtuU1cOs7TuKhC
QN/Po7qCWWqSG6wcmtoIKyUn+WkjR/Hg6yx6m/UTAtB+NHzCnjwAWav12gz1Mjwr
rFDa1sPeg5TKqAyZMg4ISFZbavva4VhYAUlfckE8FQYBjl2tqriTtM2e66foai1S
NNs671x1Udrb8zH57nGYMsRUFUQM+ZtV7a3fGAigo4aKSe5TBY8ZTNXeWHmb0moc
QqvF1afPaA+W5OFhmHZhyJF81j4A4pFQh+GdCuatl9Idxjp9y7zaAzTVjlsB9WoH
txa2bkp/AgMBAAGjQjBAMB0GA1UdDgQWBBQxw3kbuvVT1xfgiXotF2wKsyudMzAP
BgNVHRMECDAGAQH/AgEFMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOC
AQEAlGRZrTlk5ynrE/5aw4sTV8gEJPB0d8Bg42f76Ymmg7+Wgnxu1MM9756Abrsp
tJh6sTtU6zkXR34ajgv8HzFZMQSyzhfzLMdiNlXiItiJVbSYSKpk+tYcNthEeFpa
IzpXl/V6ME+un2pMSyuOoAPjPuCp1NJ70rOo4nI8rZ7/gFnkm0W09juwzTkZmDLl
6iFhkOQxIY40sfcvNUqFENrnijchvllj4PKFiDFT1FQUhXB59C4Gdyd1Lx+4ivn+
xbrYNuSD7Odlt79jWvNGr4GUN9RBjNYj1h7P9WgbRGOiWrqnNVmh5XAFmw4jV5mU
Cm26OWMohpLzGITY+9HPBVZkVw==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIIKzCCB9CgAwIBAgIQMnyYh+5V75LuIKCPktxXYDAKBggqhkjOPQQDAjCBkjEL
MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxODA2BgNVBAMT
L0NPTU9ETyBFQ0MgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBDQSAy
MB4XDTE2MDMxNTAwMDAwMFoXDTE2MDkxODIzNTk1OVowbDEhMB8GA1UECxMYRG9t
YWluIENvbnRyb2wgVmFsaWRhdGVkMSEwHwYDVQQLExhQb3NpdGl2ZVNTTCBNdWx0
aS1Eb21haW4xJDAiBgNVBAMTG3NuaTE1NjUxMi5jbG91ZGZsYXJlc3NsLmNvbTBZ
MBMGByqGSM49AgEGCCqGSM49AwEHA0IABFOv9l5QzHlZfikBccdcczXgffRbl1C3
lzo4rrsqxoMpJ0jnfkHL1IIs5gXsoFjzq9VhL0zYRZrTclLj3r07kBKjggYrMIIG
JzAfBgNVHSMEGDAWgBRACWFn8LyDcU/eEggsb9TUK3Y9ljAdBgNVHQ4EFgQUZra4
PWMG5qWGd2UQZj0DcdV5oIAwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAw
HQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCME8GA1UdIARIMEYwOgYLKwYB
BAGyMQECAgcwKzApBggrBgEFBQcCARYdaHR0cHM6Ly9zZWN1cmUuY29tb2RvLmNv
bS9DUFMwCAYGZ4EMAQIBMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwuY29t
b2RvY2E0LmNvbS9DT01PRE9FQ0NEb21haW5WYWxpZGF0aW9uU2VjdXJlU2VydmVy
Q0EyLmNybDCBiAYIKwYBBQUHAQEEfDB6MFEGCCsGAQUFBzAChkVodHRwOi8vY3J0
LmNvbW9kb2NhNC5jb20vQ09NT0RPRUNDRG9tYWluVmFsaWRhdGlvblNlY3VyZVNl
cnZlckNBMi5jcnQwJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLmNvbW9kb2NhNC5j
b20wggRyBgNVHREEggRpMIIEZYIbc25pMTU2NTEyLmNsb3VkZmxhcmVzc2wuY29t
ghsqLmFkZGFidXNpbmVzc2FpcmZhcmVvay5jb22CGSouYW5kYXV0b2luc3VyYW5j
ZXJheS5jb22CFSouYW5pdGRpYWJldGVzZmFiLmNvbYIUKi5hbnlhdHRvcm5leW9r
LmxpdmWCFyouYXB0Y3JlZGl0Y2FyZHN0YWIuY29tghkqLmFza2Fjb3VnYXJyb21h
bmNlb2suY29tghkqLmJlYWNvdWdhcnJvbWFuY2ViaWcuY29tghkqLmJlYWNvdWdh
cnJvbWFuY2V0b3AuY29tghkqLmJlY291Z2Fycm9tYW5jZXNodWIuY29tghkqLmJl
Y291Z2Fycm9tYW5jZXNyYWQuY29tghYqLmJlbnVyc2luZ3NtYXguZGVncmVlghgq
LmRvY291Z2Fycm9tYW5jZWJ1eS5jb22CGSouZG9jb3VnYXJyb21hbmNlc2Zhbi5j
b22CHiouZ2FyYWdlZG9vcnNyZXBhaXJsYWhhYnJhLmNvbYIWKi5nb251cnNpbmdz
YnV5LmRlZ3JlZYIfKi5oZWFsbGluY2x1c2l2ZXZhY2F0aW9udG9wLmNvbYIVKi5o
ZWNvbGxlZ2VzcG9ydHMuY29tgh0qLmluYXN1YnNpZGl6ZWRob3VzaW5nYmF5LmNv
bYIdKi5pbmFzdWJzaWRpemVkaG91c2luZ2ZhYi5jb22CByouaXMuZ2SCFyoua2lu
Z3N0b24taG9zaGl6b3JhLmpwghYqLnVnZXRmaW5hbmNpYWxhaWQuY29tghlhZGRh
YnVzaW5lc3NhaXJmYXJlb2suY29tghdhbmRhdXRvaW5zdXJhbmNlcmF5LmNvbYIT
YW5pdGRpYWJldGVzZmFiLmNvbYISYW55YXR0b3JuZXlvay5saXZlghVhcHRjcmVk
aXRjYXJkc3RhYi5jb22CF2Fza2Fjb3VnYXJyb21hbmNlb2suY29tghdiZWFjb3Vn
YXJyb21hbmNlYmlnLmNvbYIXYmVhY291Z2Fycm9tYW5jZXRvcC5jb22CF2JlY291
Z2Fycm9tYW5jZXNodWIuY29tghdiZWNvdWdhcnJvbWFuY2VzcmFkLmNvbYIUYmVu
dXJzaW5nc21heC5kZWdyZWWCFmRvY291Z2Fycm9tYW5jZWJ1eS5jb22CF2RvY291
Z2Fycm9tYW5jZXNmYW4uY29tghxnYXJhZ2Vkb29yc3JlcGFpcmxhaGFicmEuY29t
ghRnb251cnNpbmdzYnV5LmRlZ3JlZYIdaGVhbGxpbmNsdXNpdmV2YWNhdGlvbnRv
cC5jb22CE2hlY29sbGVnZXNwb3J0cy5jb22CG2luYXN1YnNpZGl6ZWRob3VzaW5n
YmF5LmNvbYIbaW5hc3Vic2lkaXplZGhvdXNpbmdmYWIuY29tggVpcy5nZIIVa2lu
Z3N0b24taG9zaGl6b3JhLmpwghR1Z2V0ZmluYW5jaWFsYWlkLmNvbTAKBggqhkjO
PQQDAgNJADBGAiEAyCjKS2f9JFlGB0ZN5og3nL/HEcgrkoBYeljfwUJdkn8CIQCw
xhOwODHZJAwXtkYe5mGLNdb4zPjqkalJ1wq1xaf74w==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDnzCCAyWgAwIBAgIQWyXOaQfEJlVm0zkMmalUrTAKBggqhkjOPQQDAzCBhTEL
MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT
IkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTQwOTI1MDAw
MDAwWhcNMjkwOTI0MjM1OTU5WjCBkjELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy
ZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N
T0RPIENBIExpbWl0ZWQxODA2BgNVBAMTL0NPTU9ETyBFQ0MgRG9tYWluIFZhbGlk
YXRpb24gU2VjdXJlIFNlcnZlciBDQSAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
QgAEAjgZgTrJaYRwWQKOqIofMN+83gP8eR06JSxrQSEYgur5PkrkM8wSzypD/A7y
ZADA4SVQgiTNtkk4DyVHkUikraOCAWYwggFiMB8GA1UdIwQYMBaAFHVxpxlIGbyd
nepBR9+UxEh3mdN5MB0GA1UdDgQWBBRACWFn8LyDcU/eEggsb9TUK3Y9ljAOBgNV
HQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHSUEFjAUBggrBgEF
BQcDAQYIKwYBBQUHAwIwGwYDVR0gBBQwEjAGBgRVHSAAMAgGBmeBDAECATBMBgNV
HR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9FQ0ND
ZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDByBggrBgEFBQcBAQRmMGQwOwYIKwYB
BQUHMAKGL2h0dHA6Ly9jcnQuY29tb2RvY2EuY29tL0NPTU9ET0VDQ0FkZFRydXN0
Q0EuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC5jb21vZG9jYTQuY29tMAoG
CCqGSM49BAMDA2gAMGUCMQCsaEclgBNPE1bAojcJl1pQxOfttGHLKIoKETKm4nHf
EQGJbwd6IGZrGNC5LkP3Um8CMBKFfI4TZpIEuppFCZRKMGHRSdxv6+ctyYnPHmp8
7IXOMCVZuoFwNLg0f+cB0eLLUg==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICiTCCAg+gAwIBAgIQH0evqmIAcFBUTAGem2OZKjAKBggqhkjOPQQDAzCBhTEL
MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT
IkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwMzA2MDAw
MDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy
ZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N
T0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlv
biBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQDR3svdcmCFYX7deSR
FtSrYpn1PlILBs5BAH+X4QokPB0BBO490o0JlwzgdeT6+3eKKvUDYEs2ixYjFq0J
cfRK9ChQtP6IHG4/bC8vCVlbpVsLM5niwz2J+Wos77LTBumjQjBAMB0GA1UdDgQW
BBR1cacZSBm8nZ3qQUfflMRId5nTeTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/
BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjEA7wNbeqy3eApyt4jf/7VGFAkK+qDm
fQjGGoe9GKhzvSbKYAydzpmfz1wPMOG+FDHqAjAU9JM8SaczepBGR7NjfRObTrdv
GDeAU/7dIOA1mjbRxwG55tzd8/8dLDoWV9mSOdY=
-----END CERTIFICATE-----

        """
        }
      ]
    }
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  bindCaches = ["db-cache", "user-cache", "session-cache", "semester-mode-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=blockView"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

rss.uri = "https://studip.fh-schmalkalden.de/rss.php?cid=fec27134b4fffb6c3c74a75d082b59df&id=a88776e9ec68c2990f6cbb5ff8609752"
courses = {
  courseNames = ["bai", "bawi", "bamc", "bais", "bamm", "mai"]
  semesters = [6, 6, 6, 6, 6, 3]
}
schedule {
  baseUrl = "http://my.fh-sm.de/~fbi-x/Stundenplan/"
  head = "kopf.html"
  shortCuts = "abkuerzungsverzeichnis.html"
  groups = "gruppen.html"
}

twitter {
  Consumer=""
  ConsumerSecret=""
  Token=""
  TokenSecret=""
  enabled=false
  debug=true
}

spirit{
  host="http://localhost:9000"
  mode="dev"
}

